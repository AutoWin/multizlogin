<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <title>Quản lý Webhook Theo Tài Khoản Zalo</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background-color: #fff;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
        h1, h2 {
            color: #333;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }
        th, td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        th {
            background-color: #f2f2f2;
            font-weight: bold;
        }
        tr:hover {
            background-color: #f9f9f9;
        }
        .form-group {
            margin-bottom: 15px;
        }
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        input[type="text"], select {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-sizing: border-box;
        }
        button {
            background-color: #4CAF50;
            color: white;
            padding: 10px 15px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        button:hover {
            background-color: #45a049;
        }
        .btn-delete {
            background-color: #f44336;
        }
        .btn-delete:hover {
            background-color: #d32f2f;
        }
        .btn-edit {
            background-color: #2196F3;
        }
        .btn-edit:hover {
            background-color: #0b7dda;
        }
        .message {
            padding: 10px;
            margin-bottom: 15px;
            border-radius: 4px;
        }
        .message.success {
            background-color: #dff0d8;
            color: #3c763d;
            border: 1px solid #d6e9c6;
        }
        .message.error {
            background-color: #f2dede;
            color: #a94442;
            border: 1px solid #ebccd1;
        }
        .tabs {
            display: flex;
            margin-bottom: 20px;
            border-bottom: 1px solid #ddd;
        }
        .tab {
            padding: 10px 20px;
            cursor: pointer;
            border: 1px solid transparent;
            border-bottom: none;
            margin-bottom: -1px;
        }
        .tab.active {
            background-color: #fff;
            border-color: #ddd;
            border-bottom-color: transparent;
        }
        .tab-content {
            display: none;
        }
        .tab-content.active {
            display: block;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Quản lý Webhook Theo Tài Khoản Zalo</h1>
        
        <div class="tabs">
            <div class="tab active" onclick="openTab(event, 'accounts-tab')">Danh sách tài khoản Zalo</div>
            <div class="tab" onclick="openTab(event, 'webhook-config-tab')">Cấu hình Webhook</div>
            <div class="tab" onclick="openTab(event, 'webhook-help-tab')">Hướng dẫn</div>
        </div>
        
        <div id="message-container"></div>
        
        <div id="accounts-tab" class="tab-content active">
            <h2>Danh sách tài khoản Zalo đã đăng nhập</h2>
            <table id="accounts-table">
                <thead>
                    <tr>
                        <th>ID Tài Khoản</th>
                        <th>Số Điện Thoại</th>
                        <th>Proxy</th>
                        <th>Webhook</th>
                        <th>Thao tác</th>
                    </tr>
                </thead>
                <tbody id="accounts-list">
                    <!-- Danh sách tài khoản sẽ được hiển thị ở đây -->
                </tbody>
            </table>
        </div>
        
        <div id="webhook-config-tab" class="tab-content">
            <h2>Cấu hình Webhook cho tài khoản</h2>
            
            <form id="webhook-form">
                <div class="form-group">
                    <label for="ownId">ID Tài khoản Zalo:</label>
                    <select id="ownId" required>
                        <option value="">-- Chọn tài khoản --</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="messageWebhookUrl">URL Webhook tin nhắn:</label>
                    <input type="text" id="messageWebhookUrl" placeholder="Ví dụ: https://n8n.yourdomain.com/webhook/zalo-messages/123456">
                </div>
                
                <div class="form-group">
                    <label for="groupEventWebhookUrl">URL Webhook sự kiện nhóm:</label>
                    <input type="text" id="groupEventWebhookUrl" placeholder="Ví dụ: https://n8n.yourdomain.com/webhook/zalo-group-events/123456">
                </div>
                
                <div class="form-group">
                    <label for="reactionWebhookUrl">URL Webhook reaction:</label>
                    <input type="text" id="reactionWebhookUrl" placeholder="Ví dụ: https://n8n.yourdomain.com/webhook/zalo-reactions/123456">
                </div>
                
                <button type="submit">Lưu cấu hình</button>
            </form>
        </div>
        
        <div id="webhook-help-tab" class="tab-content">
            <h2>Hướng dẫn cấu hình webhook</h2>
            
            <h3>Tổng quan</h3>
            <p>Tính năng này cho phép bạn cấu hình các webhook khác nhau cho từng tài khoản Zalo. Điều này rất hữu ích khi bạn có nhiều workflow chatbot trên n8n và mỗi workflow cần lắng nghe sự kiện từ một tài khoản Zalo cụ thể.</p>
            
            <h3>Cách hoạt động</h3>
            <p>Khi tin nhắn, sự kiện nhóm hoặc reaction được nhận từ một tài khoản Zalo, hệ thống sẽ:</p>
            <ol>
                <li>Kiểm tra xem tài khoản đó có webhook cụ thể được cấu hình hay không</li>
                <li>Nếu có, dữ liệu sẽ được gửi đến webhook đó</li>
                <li>Nếu không, dữ liệu sẽ được gửi đến webhook mặc định (cấu hình trong .env)</li>
            </ol>
            
            <h3>Tạo webhook trên n8n</h3>
            <p>Để tạo webhook trên n8n cho từng tài khoản:</p>
            <ol>
                <li>Trên n8n, tạo một workflow mới</li>
                <li>Thêm node "Webhook" làm trigger</li>
                <li>Cấu hình webhook để nhận HTTP POST request</li>
                <li>Bật tùy chọn "Respond" trong node webhook</li>
                <li>Lưu và kích hoạt workflow</li>
                <li>Sao chép URL webhook được tạo ra</li>
                <li>Dán URL này vào trường tương ứng trong cấu hình webhook cho tài khoản Zalo</li>
            </ol>
            
            <h3>Xử lý dữ liệu trên n8n</h3>
            <p>Khi dữ liệu được gửi đến webhook trên n8n, bạn có thể phân biệt nguồn gốc của dữ liệu thông qua trường <code>_accountId</code> trong JSON được nhận. Trường này chứa ID của tài khoản Zalo (ownId) đã gửi dữ liệu.</p>
        </div>
    </div>
    
    <script>
        // Biến lưu trữ tạm thời danh sách các tài khoản
        let accounts = [];
        
        // Hàm mở tab
        function openTab(evt, tabName) {
            // Ẩn tất cả nội dung tab
            const tabContents = document.getElementsByClassName("tab-content");
            for (let i = 0; i < tabContents.length; i++) {
                tabContents[i].classList.remove("active");
            }
            
            // Bỏ kích hoạt tất cả các tab
            const tabs = document.getElementsByClassName("tab");
            for (let i = 0; i < tabs.length; i++) {
                tabs[i].classList.remove("active");
            }
            
            // Hiển thị tab hiện tại và đánh dấu nút tab là active
            document.getElementById(tabName).classList.add("active");
            evt.currentTarget.classList.add("active");
        }
        
        // Hiển thị thông báo
        function showMessage(message, type) {
            const messageContainer = document.getElementById('message-container');
            messageContainer.innerHTML = `<div class="message ${type}">${message}</div>`;
            
            // Tự động ẩn thông báo sau 5 giây
            setTimeout(() => {
                messageContainer.innerHTML = '';
            }, 5000);
        }
        
        // Lấy danh sách tài khoản Zalo
        async function loadAccounts() {
            try {
                const response = await fetch('/accounts', {
                    headers: {
                        'Accept': 'application/json'
                    }
                });
                
                if (!response.ok) throw new Error('Không thể tải danh sách tài khoản');
                
                const data = await response.json();
                
                if (data.success) {
                    // Nếu API trả về mảng accounts trực tiếp
                    if (data.accounts && Array.isArray(data.accounts)) {
                        accounts = data.accounts;
                    } 
                    // Nếu có dữ liệu HTML, xử lý để lấy dữ liệu tài khoản
                    else if (data.html) {
                        const tempDiv = document.createElement('div');
                        tempDiv.innerHTML = data.html;
                        
                        const rows = tempDiv.querySelectorAll('tbody tr');
                        accounts = Array.from(rows).map(row => {
                            const cells = row.querySelectorAll('td');
                            return {
                                ownId: cells[0].textContent.trim(),
                                phoneNumber: cells[1].textContent.trim(),
                                proxy: cells[2].textContent.trim()
                            };
                        });
                    }
                    
                    // Cập nhật danh sách tài khoản
                    updateAccountsList();
                    // Cập nhật dropdown chọn tài khoản
                    updateAccountSelect();
                } else {
                    showMessage(data.message || 'Không có tài khoản nào đăng nhập', 'error');
                }
            } catch (error) {
                console.error('Lỗi khi tải danh sách tài khoản:', error);
                showMessage('Lỗi khi tải danh sách tài khoản', 'error');
            }
        }
        
        // Cập nhật danh sách tài khoản trên giao diện
        async function updateAccountsList() {
            const accountsList = document.getElementById('accounts-list');
            accountsList.innerHTML = '';
            
            if (accounts.length === 0) {
                accountsList.innerHTML = '<tr><td colspan="5">Không có tài khoản nào đăng nhập</td></tr>';
                return;
            }
            
            // Lấy thông tin webhook cho tất cả tài khoản
            const webhookConfigs = await getWebhookConfigs();
            
            for (const account of accounts) {
                const tr = document.createElement('tr');
                
                // Cell chứa ownId
                const tdOwnId = document.createElement('td');
                tdOwnId.textContent = account.ownId;
                tr.appendChild(tdOwnId);
                
                // Cell chứa số điện thoại
                const tdPhone = document.createElement('td');
                tdPhone.textContent = account.phoneNumber || 'N/A';
                tr.appendChild(tdPhone);
                
                // Cell chứa proxy
                const tdProxy = document.createElement('td');
                tdProxy.textContent = account.proxy || 'Không có';
                tr.appendChild(tdProxy);
                
                // Cell hiển thị trạng thái webhook
                const tdWebhook = document.createElement('td');
                const hasWebhook = webhookConfigs && 
                                  webhookConfigs.accounts && 
                                  webhookConfigs.accounts[account.ownId];
                
                if (hasWebhook) {
                    tdWebhook.innerHTML = `<span style="color: green">Đã cấu hình</span>`;
                } else {
                    tdWebhook.innerHTML = `<span style="color: gray">Chưa cấu hình</span>`;
                }
                tr.appendChild(tdWebhook);
                
                // Cell chứa nút thao tác
                const tdActions = document.createElement('td');
                
                // Nút cấu hình webhook
                const configButton = document.createElement('button');
                configButton.textContent = 'Cấu hình webhook';
                configButton.className = 'btn-edit';
                configButton.onclick = () => configWebhook(account.ownId);
                tdActions.appendChild(configButton);
                
                // Nếu đã có webhook, thêm nút xóa
                if (hasWebhook) {
                    const deleteButton = document.createElement('button');
                    deleteButton.textContent = 'Xóa';
                    deleteButton.className = 'btn-delete';
                    deleteButton.style.marginLeft = '5px';
                    deleteButton.onclick = () => deleteWebhook(account.ownId);
                    tdActions.appendChild(deleteButton);
                }
                
                tr.appendChild(tdActions);
                accountsList.appendChild(tr);
            }
        }
        
        // Cập nhật dropdown chọn tài khoản
        function updateAccountSelect() {
            const select = document.getElementById('ownId');
            // Giữ lại tùy chọn đầu tiên
            select.innerHTML = '<option value="">-- Chọn tài khoản --</option>';
            
            for (const account of accounts) {
                const option = document.createElement('option');
                option.value = account.ownId;
                option.textContent = `${account.ownId} (${account.phoneNumber || 'N/A'})`;
                select.appendChild(option);
            }
        }
        
        // Lấy cấu hình webhook của tất cả tài khoản
        async function getWebhookConfigs() {
            try {
                const response = await fetch('/api/account-webhooks');
                if (!response.ok) throw new Error('Không thể tải cấu hình webhook');
                
                const data = await response.json();
                return data.success ? data.data : null;
            } catch (error) {
                console.error('Lỗi khi tải cấu hình webhook:', error);
                return null;
            }
        }
        
        // Lấy cấu hình webhook của một tài khoản cụ thể
        async function getAccountWebhook(ownId) {
            try {
                const response = await fetch(`/api/account-webhook/${ownId}`);
                if (!response.ok) throw new Error('Không thể tải cấu hình webhook');
                
                const data = await response.json();
                return data.success ? data.data : null;
            } catch (error) {
                console.error(`Lỗi khi tải cấu hình webhook cho tài khoản ${ownId}:`, error);
                return null;
            }
        }
        
        // Cấu hình webhook cho tài khoản
        async function configWebhook(ownId) {
            // Chuyển sang tab cấu hình webhook
            const tabEvent = { currentTarget: document.querySelector('.tab:nth-child(2)') };
            openTab(tabEvent, 'webhook-config-tab');
            
            // Chọn tài khoản trong dropdown
            document.getElementById('ownId').value = ownId;
            
            // Lấy thông tin webhook hiện tại
            const webhookConfig = await getAccountWebhook(ownId);
            
            if (webhookConfig) {
                // Điền thông tin vào form
                document.getElementById('messageWebhookUrl').value = webhookConfig.messageWebhookUrl || '';
                document.getElementById('groupEventWebhookUrl').value = webhookConfig.groupEventWebhookUrl || '';
                document.getElementById('reactionWebhookUrl').value = webhookConfig.reactionWebhookUrl || '';
            } else {
                // Reset form nếu không có cấu hình
                document.getElementById('messageWebhookUrl').value = '';
                document.getElementById('groupEventWebhookUrl').value = '';
                document.getElementById('reactionWebhookUrl').value = '';
            }
        }
        
        // Lưu cấu hình webhook
        async function saveWebhook(event) {
            event.preventDefault();
            
            const ownId = document.getElementById('ownId').value;
            const messageWebhookUrl = document.getElementById('messageWebhookUrl').value;
            const groupEventWebhookUrl = document.getElementById('groupEventWebhookUrl').value;
            const reactionWebhookUrl = document.getElementById('reactionWebhookUrl').value;
            
            if (!ownId) {
                showMessage('Vui lòng chọn tài khoản', 'error');
                return;
            }
            
            try {
                const response = await fetch('/api/account-webhook', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        ownId,
                        messageWebhookUrl,
                        groupEventWebhookUrl,
                        reactionWebhookUrl
                    })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showMessage('Đã lưu cấu hình webhook thành công', 'success');
                    // Cập nhật lại danh sách tài khoản
                    loadAccounts();
                } else {
                    showMessage(data.error || 'Lỗi khi lưu cấu hình webhook', 'error');
                }
            } catch (error) {
                console.error('Lỗi khi lưu cấu hình webhook:', error);
                showMessage('Lỗi khi lưu cấu hình webhook', 'error');
            }
        }
        
        // Xóa cấu hình webhook
        async function deleteWebhook(ownId) {
            if (!confirm(`Bạn có chắc chắn muốn xóa cấu hình webhook cho tài khoản ${ownId}?`)) {
                return;
            }
            
            try {
                const response = await fetch(`/api/account-webhook/${ownId}`, {
                    method: 'DELETE'
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showMessage('Đã xóa cấu hình webhook thành công', 'success');
                    // Cập nhật lại danh sách tài khoản
                    loadAccounts();
                } else {
                    showMessage(data.error || 'Lỗi khi xóa cấu hình webhook', 'error');
                }
            } catch (error) {
                console.error('Lỗi khi xóa cấu hình webhook:', error);
                showMessage('Lỗi khi xóa cấu hình webhook', 'error');
            }
        }
        
        // Đăng ký sự kiện
        document.getElementById('webhook-form').addEventListener('submit', saveWebhook);
        
        // Tải danh sách tài khoản khi trang được tải
        document.addEventListener('DOMContentLoaded', loadAccounts);
    </script>
</body>
</html> 